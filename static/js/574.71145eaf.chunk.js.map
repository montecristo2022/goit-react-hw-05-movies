{"version":3,"file":"static/js/574.71145eaf.chunk.js","mappings":"iQAEaA,EAAcC,EAAAA,GAAAA,KAAH,sBAIXC,EAAkBD,EAAAA,GAAAA,IAAH,mEAKfE,EAAkBF,EAAAA,GAAAA,IAAH,2CAMfG,EAAgBH,EAAAA,GAAAA,IAAH,8FAQbI,EAAQJ,EAAAA,GAAAA,MAAH,qEAILK,EAASL,EAAAA,GAAAA,OAAH,wEAKNM,EAAQN,EAAAA,GAAAA,IAAH,uDAQZO,GAAOC,EAAAA,EAAAA,IAAH,sFAUGC,EAAkBT,EAAAA,GAAAA,GAAH,oGACfO,GAIAG,EAAqBV,EAAAA,GAAAA,IAAH,yE,SCoD/B,EA7Fe,WACb,IAAMW,GAAWC,EAAAA,EAAAA,MAEjB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAcF,EAAaG,IAAI,UACrCC,QAAQC,IAAIH,GAEZ,IAGA,GAAkCI,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA4BJ,EAAAA,EAAAA,UAAS,IAArC,eAAOK,EAAP,KAAeC,EAAf,KACA,GAAoCN,EAAAA,EAAAA,UAAS,IAA7C,eAAOO,EAAP,KAAmBC,EAAnB,KAiCA,OArBAC,EAAAA,EAAAA,YAAU,WACW,KAAfF,IACFT,QAAQC,IAAIQ,GAEZZ,EAAgB,CAAEe,OAAQH,IAC1BI,MAAM,qDAAD,OArBO,mCAqBP,iCACkFJ,EADlF,gCAGFK,MAAK,SAAAC,GACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAMF,EAASG,QAG3B,OAAOH,EAASI,MACjB,IACAL,MAAK,SAAAM,GACJhB,EAAagB,EAAKC,QACnB,IAEN,GAAE,CAACxB,EAAiBY,KAGnB,UAAC5B,EAAD,YACE,UAACI,EAAD,YACE,SAACC,EAAD,CACEoC,KAAK,OACLC,GAAG,UACHC,KAAK,UACLC,SAtCR,SAAsBC,GACpBlB,EAAUkB,EAAMC,OAAOC,MACxB,EAqCOA,MAAOrB,KAET,SAACpB,EAAD,CAAQmC,KAAK,SAASO,QArC5B,SAA0BH,GACxBA,EAAMI,iBACNpB,EAAcH,GACdD,GAAa,EACd,EAiCK,0BAIc,KAAfG,EACGN,EAAU4B,KAAI,SAAAC,GACZ,OACE,SAAC,KAAD,CAAMC,GAAE,UAAKD,EAAKT,IAAoBW,MAAO,CAAEC,KAAM1C,GAArD,UACE,UAACV,EAAD,YACE,SAACK,EAAD,CACEgD,IACEJ,EAAKK,YAAL,yCACsCL,EAAKK,aA5D7D,gHA+DgBC,IAAI,MAEN,UAACtD,EAAD,YACE,4CAAoBgD,EAAKO,iBACzB,2CAAmBP,EAAKQ,yBAZDR,EAAKT,GAiBrC,IACD,KACHpB,EAAUsC,OAAS,IAAmB,IAAdpC,GACvB,SAACb,EAAD,WACE,UAACD,EAAD,6BACkBkB,EADlB,sBAIA,OAGT,C","sources":["components/StyledComponent/Movies.styled.jsx","components/Pages/Movies.jsx"],"sourcesContent":["import styled, { keyframes } from 'styled-components';\n\nexport const MainContent = styled.main``;\n\n\n\nexport const FilmInfoWrapper = styled.div`\ntext-align: center;\nmargin-bottom: 30px;\n`;\n\nexport const FilmTextWrapper = styled.div`\nmargin-top: 10px;\n`;\n\n\n\nexport const SearchWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-bottom: 20px;\n`;\n\n\n\nexport const Input = styled.input`\n  padding-top: 6px;\n  padding-bottom: 6px;\n`;\nexport const Button = styled.button`\n  cursor: pointer;\n  border: 1px black solid;\n`;\n\nexport const Image = styled.img`\nwidth: 550px;\nheight: 770px;\n`\n\n\n\n\nconst fade = keyframes`\nfrom {\n    opacity: 0;\n  }\n\n  to {\n    opacity: 1;\n  }\n`;\n\nexport const UserMistakeText = styled.h2`\nanimation: ${fade} 3s linear infinite alternate;\nanimation-iteration-count: 1;\n`\n\nexport const UserMistakeWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n \n`;\n\n\n","import { useState } from 'react';\nimport { useEffect } from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\nimport {\n  MainContent,\n  Input,\n  Button,\n  SearchWrapper,\n  UserMistakeWrapper,\n  UserMistakeText,\n  Image,\n  FilmInfoWrapper,\n  FilmTextWrapper,\n} from 'components/StyledComponent/Movies.styled';\n\nconst Movies = () => {\n  const location = useLocation();\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchValue = searchParams.get('search');\n  console.log(searchValue)\n\n  const standartPicture =\n    'https://img.freepik.com/premium-vector/big-problem-businesswomen-sits-on-the-question-mark-sign_70921-125.jpg';\n  const API_KEY = 'dfb50cc3b16f950a5a6b0ea437e17f05';\n  const [filmArray, setFilmArray] = useState([]);\n  const [MyBoolean, setMyBoolean] = useState(false);\n  const [querry, setQuerry] = useState('');\n  const [submitData, setSubmitData] = useState('');\n\n  function handleChange(event) {\n    setQuerry(event.target.value);\n  }\n\n  function recieveInputData(event) {\n    event.preventDefault();\n    setSubmitData(querry);\n    setMyBoolean(true);\n  }\n\n  useEffect(() => {\n    if (submitData !== '') {\n      console.log(submitData);\n\n      setSearchParams({ search: submitData });\n      fetch(\n        `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${submitData}&page=1&include_adult=false`\n      )\n        .then(response => {\n          if (!response.ok) {\n            throw new Error(response.status);\n          }\n\n          return response.json();\n        })\n        .then(data => {\n          setFilmArray(data.results);\n        });\n    }\n  }, [setSearchParams, submitData]);\n\n  return (\n    <MainContent>\n      <SearchWrapper>\n        <Input\n          type=\"text\"\n          id=\"message\"\n          name=\"message\"\n          onChange={handleChange}\n          value={querry}\n        />\n        <Button type=\"submit\" onClick={recieveInputData}>\n          Find film\n        </Button>\n      </SearchWrapper>\n      {submitData !== ''\n        ? filmArray.map(film => {\n            return (\n              <Link to={`${film.id}`} key={film.id} state={{ from: location }}>\n                <FilmInfoWrapper>\n                  <Image\n                    src={\n                      film.poster_path\n                        ? `https://image.tmdb.org/t/p/w500${film.poster_path}`\n                        : standartPicture\n                    }\n                    alt=\"\"\n                  />\n                  <FilmTextWrapper>\n                    <p>Average rating: {film.vote_average}</p>\n                    <p>Name of movie: {film.original_title}</p>\n                  </FilmTextWrapper>\n                </FilmInfoWrapper>\n              </Link>\n            );\n          })\n        : null}\n      {filmArray.length < 1 && MyBoolean === true ? (\n        <UserMistakeWrapper>\n          <UserMistakeText>\n            Film with name {submitData} is not exist.\n          </UserMistakeText>\n        </UserMistakeWrapper>\n      ) : null}\n    </MainContent>\n  );\n};\n\nexport default Movies;\n"],"names":["MainContent","styled","FilmInfoWrapper","FilmTextWrapper","SearchWrapper","Input","Button","Image","fade","keyframes","UserMistakeText","UserMistakeWrapper","location","useLocation","useSearchParams","searchParams","setSearchParams","searchValue","get","console","log","useState","filmArray","setFilmArray","MyBoolean","setMyBoolean","querry","setQuerry","submitData","setSubmitData","useEffect","search","fetch","then","response","ok","Error","status","json","data","results","type","id","name","onChange","event","target","value","onClick","preventDefault","map","film","to","state","from","src","poster_path","alt","vote_average","original_title","length"],"sourceRoot":""}